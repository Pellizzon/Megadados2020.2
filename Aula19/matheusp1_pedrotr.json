{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1605103363558_-195585290","id":"20201111-140243_1000099114","dateCreated":"2020-11-11T14:02:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:836","text":"%pyspark\r\n1 + 1\r\n","dateUpdated":"2020-11-11T14:03:00+0000","dateFinished":"2020-11-11T14:03:49+0000","dateStarted":"2020-11-11T14:03:00+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"2\n"}]}},{"text":"%pyspark\nrdd = sc.parallelize(range(1000))\nresultado = rdd \\\n .map(lambda x: x**2) \\\n .filter(lambda x: x % 2 == 0) \\\n .reduce(lambda x, y: x + y)\nprint(resultado)","user":"anonymous","dateUpdated":"2020-11-11T14:04:50+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1605103380186_176936491","id":"20201111-140300_1644322477","dateCreated":"2020-11-11T14:03:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:913","dateFinished":"2020-11-11T14:05:02+0000","dateStarted":"2020-11-11T14:04:50+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"166167000\n"}]}},{"text":"%pyspark\nimport boto3\ns3 = boto3.resource('s3')\nprint(s3)","user":"anonymous","dateUpdated":"2020-11-11T14:18:49+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1605103490890_1709492585","id":"20201111-140450_585341478","dateCreated":"2020-11-11T14:04:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1008","dateFinished":"2020-11-11T14:18:49+0000","dateStarted":"2020-11-11T14:18:49+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"s3.ServiceResource()\n"}]}},{"text":"%pyspark\nobj = s3.Object('megadados-alunos', 'matheusp1/Prova4-matheusp1.txt')\nbody = obj.get()['Body']\ndecoded = body.read().decode(\"utf-8\") \ndecoded","user":"anonymous","dateUpdated":"2020-11-11T14:27:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1605104329099_-1287760263","id":"20201111-141849_1771864311","dateCreated":"2020-11-11T14:18:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1107","dateFinished":"2020-11-11T14:27:57+0000","dateStarted":"2020-11-11T14:27:57+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"'QUESTÃO 5\\n---------\\n\\nPor simplicidade, estamos supondo que n é um número que se somado 1, torna-se\\nmúltiplo de 3.\\n\\nLOOP EXTERNO SOZINHO:\\nA variável i começa em 2 e é incrementada de 3 em 3 até passar de n.\\nLogo, o número de iterações é x tal que 2 + 3(x-1) = n, ou seja, x = (n + 1)/3.\\n\\nLOOP INTERNO SOZINHO:\\nA variável j começa em i e diminui de 1 em 1 até passar de 0.\\nLogo, o número de iterações é y tal que i - 1(y-1) = 0, ou seja, y = i+1.\\n\\nDOIS LOOPS JUNTOS:\\nComo o número de iterações do loop interno é VARIÁVEL\\ne os valores de i são 2, 5, 8, ..., n+3\\no total de iterações é igual a 2, 3, 4, 5, ..., (n+4)/3\\nIsso é uma SOMA DE PA com:\\n- primeiro elemento 2;\\n- último elemento (n+4)/3;\\n- número de elementos n+1;\\nOu seja, é igual a:\\n(2 + (n+4)/3).(n+1)/2 = (6 + n + 4).(n+1)/6 = (n^2 + 11n + 10)/6\\n\\nFAMÍLIA DE COMPLEXIDADE:\\nPelas regras de simplificação, o código é O(n^2).\\n\\n\\nQUESTÃO 6\\n---------\\n\\nDado que as otimizações do Android são dadas de forma clara: velocidade \\nacima de tudo, devemos considerar a velocidade de operação das pilhas. \\n\\nAssim, temos que a melhor opção seria o vetor estático, dado que é o\\nprimeiro em relação a velocidade na tabela na prática.\\n\\nAinda é afirmado que pode-se manter no máximo 10 activities nessa pilha, \\nlogo temos o conhecimento do tamanho máximo para a implementação de\\num vetor estático.\\n\\nSeguindo as tabelas, o vetor estático parece ser de fato a melhor escolha,\\ntendo em vista que é o mais rápido e sabemos o número máximo de activities. \\nAssim, se ultrapassar, de fato essa fila será \"estourada\" e não há proteção\\ncontra isso nessa implementação. Como dito no enunciado, caberia ao desenvolvedor\\ngarantir uma boa implementação de seus apps.\\n\\n\\nQUESTÃO 7\\n---------\\n\\nFoi dado no enunciado que jogadores saem e entram e são consultados o \\ntempo todo. E que acontecem muito mais consultas que entradas e saídas.\\n\\nConsiderando apenas essas informações, temos que o sugerido em relação\\na recomendação no tempo é tabela de espalhamento (1), AVL (2) e rubro-negra (3).\\n\\nPorém, ainda foi informado que a velocidade das operações são relevantes para\\nnão se ter lag, mais especificamente, lags imprevisíveis são inaceitáveis.\\n\\nAssim, devemos considerar a tabela que nos dá informação acerca desse fato.\\nNesse caso, não seria ideal usar tabela de espalhamento, pois a complexidade \\nno caso médio é diferente da complexidade no pior caso por margem considerável\\n[O(1) e O(n) ou O(log n)]. As outras implementações de set demonstram-se \\ncom médias boas: para inserções e remoções O(log n), tendo apenas uma \"melhora\"\\nde desempenho no melhor caso de busca [O(1)]. No caso médio e pior caso, são\\nO(log n), indicando assim, que as duas seriam a melhor escolha, excluindo \\nespalhamento. \\n\\nComo a ordem de recomendação em relação ao tempo para o caso que há mais buscas\\nque modificações mostra que AVL é melhor que rubro-negra, a escolha de set mais\\nadequada seria a árvore AVL.\\n\\nFoi falado que a memória não é um problema e poderia ser aumentada, o que permite a escolha\\nda árvore AVL. Ainda, não foi considerado o tempo para encontrar máximos e mínimos e antecessores (o que\\nnão faria sentido já que são logins de usuários...).\\n\\n\\nQUESTÃO 8\\n---------\\n\\nFoi informado que se trata de uma plataforma simples com multiplas turmas\\ne necessidade de movimentar rapidamente, na qual são feitas\\nmais buscas que modificações (para alunos), e que essas buscas devem ser rápidas. \\n\\nExiste o fato de que existiram modificações feitas pelos professores, no \\nentando trata-se de um caso mais pontual e não seria a prioridade. \\n\\nLevando em consideração esses fatos e que não há problemas em relação a alguma demonstram\\nextra (único ponto em relação a isso foi que inserções não precisam\\nser necessariamente rápidas), a análise do pior caso de cada set passa a ser irrelevante.\\nAssim, basta considerarmos a ordem de recomendação em relação ao tempo dos sets,\\nlevando a conclusão de que a tabela de espalhamento é a melhor opção para\\nser implementada.\\n\\nFoi mencionado que não há problemas de memória e memória não é prioridade.\\nMesmo assim, a tabela de espalhamento atende esse requisito, já que é superior\\nse comparada com as outras duas árvores. Foi dito também que é irrelevante encontrar\\nmínimo e máximo/antecessor e sucessor, o que seria um problema para a tabela de\\nespalhamento.\\n'\n"}]}},{"text":"%pyspark\nlist_words = decoded.replace('\\n', ' ').split(' ')","user":"anonymous","dateUpdated":"2020-11-11T14:29:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1605104505495_2118308296","id":"20201111-142145_1718541258","dateCreated":"2020-11-11T14:21:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1212","dateFinished":"2020-11-11T14:29:08+0000","dateStarted":"2020-11-11T14:29:08+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-11-11T14:34:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1605105277333_-126420648","id":"20201111-143437_1223730312","dateCreated":"2020-11-11T14:34:37+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1742"},{"text":"%pyspark\nwords = sc.textFile(decoded).flatMap(lambda line: line.split(\" \")).map(lambda word: (word, 1)).reduceByKey(lambda a,b:a +b)\nwords.saveAsTextFile","user":"anonymous","dateUpdated":"2020-11-11T14:36:18+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1605104919242_-1936043568","id":"20201111-142839_531639913","dateCreated":"2020-11-11T14:28:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1476","dateFinished":"2020-11-11T14:35:40+0000","dateStarted":"2020-11-11T14:35:40+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"PythonRDD[20] at RDD at PythonRDD.scala:53\n"}]}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-11-11T14:32:46+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1605105166757_1268807784","id":"20201111-143246_1784378975","dateCreated":"2020-11-11T14:32:46+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1597"}],"name":"matheusp1_pedrotr","id":"2FPUMHJH1","noteParams":{},"noteForms":{},"angularObjects":{"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}